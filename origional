--CM ONLY
local RunService = game:GetService("RunService")
local Inputs = game:GetService("UserInputService")

local DEBUG_VISUALISER = true

local Players = game.Players
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character
local Humanoid = nil
local HumanoidRootPart = nil

local SphereSize = 2.25
local SphereColour = Color3.fromRGB(55,0,255)

local LastPoint = Vector3.new(0,0,0)
local JustSwitched = false
local WiggleThing = 0
local Right = true
local CanSwitch = true
local GrabbedAt = tick()
local SwitchedAt = tick()

local MoveVector = Vector3.new(0,0,0)
local MovePlayer = false
local MovePlayerTo = false

local LParts = {}
local BombTracker = {}

local offset = 0.54

local Track = false
local Hold = false
local Sphere = false

local PlayerTracking = {}

local function UpdatePlayers()
	for _,v in pairs(game.Players:GetPlayers()) do
		if v == LocalPlayer then continue end
		if not PlayerTracking[v.Name] and v.Character then
			if not v.Character:FindFirstChild("HumanoidRootPart") then continue end
			PlayerTracking[v.Name] = {
				Pos = v.Character:FindFirstChild("HumanoidRootPart").Position,
				LastPos = v.Character:FindFirstChild("HumanoidRootPart").Position
			}
		elseif v.Character then
			if not v.Character:FindFirstChild("HumanoidRootPart") then continue end
			local LastPos = PlayerTracking[v.Name].Pos
			PlayerTracking[v.Name] = {
				Pos = v.Character:FindFirstChild("HumanoidRootPart").Position,
				LastPos = LastPos
			}
		else
			PlayerTracking[v.Name] = {
				Pos = nil,
				LastPos = nil
			}
		end

	end
end

local function DrawLine( vec_1, vec_2)
	local p = Instance.new("Part")
	p.Anchored = true
	p.CanCollide = false
	p.Parent = workspace
	local m = (vec_1 - vec_2).Magnitude
	p.Size = Vector3.new(0.03, 0.03,  m)
	p.CFrame = CFrame.new(
		vec_1:Lerp(vec_2, 0.5),
		vec_2
	)
	return p
end

local function Visualise(Path,Colour)
	for i,v in pairs(Path) do
		if i == 1 then continue end
		task.spawn(function()
			local p = DrawLine(Path[i-1],Path[i])
			p.Color = Colour
			task.wait()
			p:Destroy()
		end)
	end
end

local function OnKey(Key,gpe)
	if gpe then return end
	if Key.KeyCode == Enum.KeyCode.R then
		Track = not Track
	end
	if Key.KeyCode == Enum.KeyCode.T then
		Sphere = not Sphere
	end
	if Key.KeyCode == Enum.KeyCode.Q then
		Hold = not Hold
	end
end

local function CheckMoveTo(Start: Vector3,End: Vector3,Target: Player,Visual)
	local Result = nil
	local Params = RaycastParams.new()
	Params.FilterType = Enum.RaycastFilterType.Exclude
	Params.FilterDescendantsInstances = LParts
	if Start ~= End and Start and End and Target then
		local P2 = (CFrame.new(Start,End) * CFrame.new(Vector3.new(0.45,0,0.02))).Position
		local P3 = (CFrame.new(Start,End) * CFrame.new(Vector3.new(-0.45,0,0.02))).Position

		local R1 = workspace:Raycast(Start,End-Start,Params)
		local R2 = workspace:Raycast(P2,End-Start,Params)
		local R3 = workspace:Raycast(P3,End-Start,Params)

		if Target then
			if R1 then
				if R1.Instance:FindFirstAncestorWhichIsA("Model") ~= Target.Character then
					Result = R1
				end
			end	
			if R2 then
				if R2.Instance:FindFirstAncestorWhichIsA("Model") ~= Target.Character then
					if not Result then
						Result = R2
					elseif Result.Distance > R2.Distance then
						Result = R2
					end
				end
			end
			if R3 then
				if R3.Instance:FindFirstAncestorWhichIsA("Model") ~= Target.Character then
					if not Result then
						Result = R3
					elseif Result.Distance > R3.Distance then
						Result = R3
					end
				end
			end
		else
			if R1 then
				Result = R1
			end	
			if R2 then
				if not Result then
					Result = R2
				elseif Result.Distance > R2.Distance then
					Result = R2
				end
			end
			if R3 then
				if not Result then
					Result = R3
				elseif Result.Distance > R3.Distance then
					Result = R3
				end
			end
		end
	end
	return Result
end

local function CheckPath(Path,Target)
	local Distance = 0
	for i,v in pairs(Path) do
		if i == 1 then continue end
		Distance += (Path[i-1]-Path[i]).Magnitude
		if CheckMoveTo(Path[i-1],Path[i],Target,true) then return false,math.huge,Vector3.new(0,0,0) end
	end
	local s = Vector3.new(0,0,0)
	if #Path > 1 then
		s = ((Path[2]-Path[1]) * Vector3.new(1,0,1))
		if s.Magnitude > 1 then
		s = s.Unit
		end
	end
	return true,Distance,s
end

local function UpdateSphere()
	if not Sphere then return end
	for _,v in pairs(Players:GetPlayers()) do
		if v == LocalPlayer then continue end
		if v.Character then
			local chr = v.Character
			if chr:FindFirstChild("HumanoidRootPart") then
				local hrp = chr.HumanoidRootPart
				hrp.Size = Vector3.new(SphereSize *2 + 2,2,SphereSize*2 + 1)
				hrp.CanCollide = false
				hrp.Transparency = 1
			end
		end
	end
	if LocalPlayer.Character then
		local chr = LocalPlayer.Character
		if chr:FindFirstChildWhichIsA("Tool") then
			local tool = chr:FindFirstChildWhichIsA("Tool")

			if tool:FindFirstChildWhichIsA("BasePart") then
				local Handle = tool:FindFirstChildWhichIsA("BasePart")
				task.spawn(function()
					local p = Instance.new("Part")
					p.Shape = Enum.PartType.Ball
					p.CanCollide = false
					p.Transparency = 0.8
					p.Material = "Neon"
					p.Color = SphereColour
					p.Size = Vector3.new(SphereSize*2 + 2,SphereSize*2 + 2,SphereSize*2 + 2)
					p.Position = Handle.Position
					p.Parent = Handle
					task.wait()
					p:Destroy()
				end)
			end
		end
	end	
end

local function GetNodes(Parts)
	local Nodes = {}
	for _,Part in pairs(Parts) do
		if Part:IsA("BasePart") and not table.find(LParts,Part) then
			if Part.CanCollide == false then continue end
			table.insert(Nodes,(Part.CFrame * CFrame.new(Vector3.new(Part.Size.X/2 + offset,0,Part.Size.Z/2 + offset))).Position)
			table.insert(Nodes,(Part.CFrame * CFrame.new(Vector3.new(-Part.Size.X/2 - offset,0,Part.Size.Z/2 + offset))).Position)
			table.insert(Nodes,(Part.CFrame * CFrame.new(Vector3.new(Part.Size.X/2 + offset,0,-Part.Size.Z/2 - offset))).Position)
			table.insert(Nodes,(Part.CFrame * CFrame.new(Vector3.new(-Part.Size.X/2 - offset,0,-Part.Size.Z/2 - offset))).Position)
		end
	end
	return Nodes
end

local function ClosestPlayer(Pos: Vector3)
	local Dist = math.huge
	local Closest = nil
	local ClosestPosition = nil
	local HumRP = nil

	for _,v in pairs(Players:GetPlayers()) do
		if v == LocalPlayer then continue end-- or v.Neutral then continue end
		if v.Character then-- and v.Team.Name == "Playing" then
			local Humanoid = v.Character:FindFirstChildWhichIsA("Humanoid")
			local HRP = v.Character:FindFirstChild("HumanoidRootPart")
			if Humanoid and HRP and not v.Character:FindFirstChildWhichIsA("Tool") then
				if Humanoid.Health > 0 and HRP:IsA("BasePart") then
					if (HRP.Position - Pos).Magnitude < Dist then
						Closest = v
						ClosestPosition = HRP.Position
						Dist = (HRP.Position - Pos).Magnitude
						HumRP = HRP
					end
				end
			end
		end
	end
	return {Position = ClosestPosition,Player = Closest,Distance = Dist,RootPart = HumRP}
end

local function NearestPointOnHRP(Target: BasePart,HumanoidRootPart: Part)
	local Point1 = Target.CFrame * CFrame.new(Vector3.new(1.98,0,-0.98))
	local Point2 = Target.CFrame * CFrame.new(Vector3.new(1.98,0,0.98))
	local Point3 = Target.CFrame * CFrame.new(Vector3.new(-1.98,0,-0.98))
	local Point4 = Target.CFrame * CFrame.new(Vector3.new(-1.98,0,0.98))


	local Offset1 = Point1:ToObjectSpace(HumanoidRootPart.CFrame).Position * Vector3.new(1,0,1)
	local Offset2 = Point2:ToObjectSpace(HumanoidRootPart.CFrame).Position * Vector3.new(1,0,1)
	local Offset3 = Point3:ToObjectSpace(HumanoidRootPart.CFrame).Position * Vector3.new(1,0,1)
	local Offset4 = Point4:ToObjectSpace(HumanoidRootPart.CFrame).Position * Vector3.new(1,0,1)
	local OffsetHum = Target.CFrame:ToObjectSpace(HumanoidRootPart.CFrame).Position * Vector3.new(1,0,1)

	local InFrontLine = (Offset1.X < 0) and (Offset3.X > 0) and (Offset1.Z < 0)
	local InBackLine = (Offset2.X < 0) and (Offset4.X > 0) and (Offset2.Z > 0)

	local InLeftLine = (Offset1.Z > 0) and (Offset2.Z < 0) and (Offset1.X < 0)
	local InRightLine = (Offset3.Z > 0) and (Offset4.Z < 0) and (Offset3.X > 0)

	if not (InFrontLine or InBackLine or InLeftLine or InRightLine) then
		local Nearest = Point1.Position
		local Distance = (Point1.Position - HumanoidRootPart.Position).Magnitude
		for _,v in pairs({Point2,Point3,Point4}) do
			if (v.Position - HumanoidRootPart.Position).Magnitude < Distance then
				Distance = (v.Position - HumanoidRootPart.Position).Magnitude
				Nearest = v.Position
			end
		end
		return Nearest
	else
		local Point = Vector3.new(0,0,0)
		if InFrontLine then
			Point = (Target.CFrame * CFrame.new(Vector3.new(OffsetHum.X,0,-0.5))).Position
		elseif InBackLine then
			Point = (Target.CFrame * CFrame.new(Vector3.new(OffsetHum.X,0,0.5))).Position
		elseif InLeftLine then
			Point = (Target.CFrame * CFrame.new(Vector3.new(2,0,OffsetHum.Z))).Position
		elseif InRightLine then
			Point = (Target.CFrame * CFrame.new(Vector3.new(-2,0,OffsetHum.Z))).Position
		end
		return Point
	end
end

local function UpdateLocalPlayerParts()
	table.clear(LParts)
	if LocalPlayer.Character then
		for _,v in pairs(LocalPlayer.Character:GetDescendants()) do
			if v:IsA("BasePart") then
				table.insert(LParts,v)
			end
		end
	end
end

local function Face(Position: Vector3,HumanoidRootPart: Part,Offset)
	if HumanoidRootPart ~= nil then
		local Direction = ((Position - HumanoidRootPart.Position) * Vector3.new(1,0,1)).Unit
		local NewOrientation = CFrame.new(HumanoidRootPart.Position,HumanoidRootPart.Position + Direction) * Offset

		HumanoidRootPart.CFrame = NewOrientation
	end
end

local function NearestPath(Start: Vector3,End: Vector3,Target: Player)
	local Distance = math.huge
	local Path = {Start}
	local Vec = Vector3.new(0,0,0)

	local Distance2 = math.huge
	local Path2 = {Start}
	local Vec2 = Vector3.new(0,0,0)

	local TBL = {}
	local Iteration = 1
	local Block = true

	local Current = Start

	while Block and Iteration <= 15 do

		Block = CheckMoveTo(Current,End,Target)

		if Block then


			local cl = nil
			local d = math.huge
			for _,v in pairs(GetNodes({Block.Instance})) do
				if (End-v).Magnitude < d and not table.find(TBL,v) then
					if not CheckMoveTo(Current,v,Target) then
						cl = v
						d = (End-v).Magnitude
					end
				end
			end

			if not cl then
				for _,v in pairs(GetNodes(workspace:GetPartBoundsInBox(Block.Instance.CFrame,Block.Instance.Size * 2))) do
					if (End-v).Magnitude < d and not table.find(TBL,v) then
						if not CheckMoveTo(Current,v,Target) then
							cl = v
							d = (End-v).Magnitude
						end
					end
				end
			end

			if cl then

				if Iteration > 1 then
					if not CheckMoveTo(Path[#Path-1],cl,Target) then
						table.remove(Path,#Path)
					end
				end

				table.insert(TBL,cl)
				table.insert(Path,cl)
				Current = cl
			else
				break
			end


		end
		Iteration += 1
	end

	table.insert(Path,End)

	TBL = {Path[2]}

	Current = Start

	Block = true
	Iteration = 1

	while Block and Iteration <= 15 do

		Block = CheckMoveTo(Current,End,Target)

		if Block then

			local cl = nil
			local d = math.huge
			for _,v in pairs(GetNodes({Block.Instance})) do
				if (End-v).Magnitude < d and not table.find(TBL,v) then
					if not CheckMoveTo(Current,v,Target) then
						cl = v
						d = (End-v).Magnitude
					end
				end
			end

			if not cl then
				for _,v in pairs(GetNodes(workspace:GetPartBoundsInBox(Block.Instance.CFrame,Block.Instance.Size * 2))) do
					if (End-v).Magnitude < d and not table.find(TBL,v) then
						if not CheckMoveTo(Current,v,Target) then
							cl = v
							d = (End-v).Magnitude
						end
					end
				end
			end

			if cl then

				if Iteration > 1 then
					if not CheckMoveTo(Path[#Path-1],cl,Target) then
						table.remove(Path,#Path)
					end
				end

				table.insert(TBL,cl)
				table.insert(Path2,cl)
				Current = cl
			else
				break
			end


		end
		Iteration += 1
	end

	table.insert(Path2,End)
	if not table.find(Path,End) then
		table.insert(Path,End)
	end

	local P1V,Distance,Vec = CheckPath(Path)
	local P2V,Distance2,Vec2 = CheckPath(Path2)
	
	
	if P2V and Distance2 < Distance and Vec2 then
		Path = Path2
		Vec = Vec2
		Distance = Distance2
	end
	
	if DEBUG_VISUALISER then
		Visualise(Path,Color3.fromRGB(0,144,0))
	end

	return Vec,Distance,Path
end

local ST = true

local function TrackPlayer(Closest,HRP,step)
	local ToFace = HRP.Position
	local Rotation = CFrame.Angles(0,0,0)
	if Closest and Closest.RootPart and Closest.Position and Closest.Player and HRP then
		local Vector,Distance,Path = NearestPath(HRP.Position,Closest.Position,Closest.Player)
		if Vector then

			if #Path < 3 and (tick()-GrabbedAt > 0.8 and Distance < 5) then
				if ST then
					Rotation = CFrame.Angles(0,0.78539816339,0)
				else
					Rotation = CFrame.Angles(0,1.25663706144,0)
				end
				ST = not ST
				ToFace = NearestPointOnHRP(Closest.RootPart,HRP)
			else
				ToFace = HRP.Position + Vector
				Rotation = CFrame.Angles(0,-1.57079632679,0)
			end
			MoveVector = Vector
			MovePlayer = true
			return ToFace,Rotation
		end

	end
end

local function Flip(list)
	local c = {}
	for i,v in pairs(list) do
		table.insert(c,list[#list-i+1])
	end
	return c
end

local function HoldOn(Closest,HRP,Time)
	local ToFace = Closest.Position
	local Rotation = CFrame.Angles(0,-2.3561944902,0)
	local const = 4 + ((Time * 2) - 0.1)
	if const > 9 or RunService:IsStudio() then
		const = 9
	end
	const = 6.5
	if Closest and Closest.RootPart and Closest.Position and Closest.Player and HRP then
		
		local v,d,p = NearestPath(HRP.Position,Closest.Position,Closest.Player)
		--[[
		if #p > 2 and d > const then
			local flipped = Flip(p)
			local dist = 0
			local node = 1
			for i,v in pairs(flipped) do
				if i == 1 or i == #flipped then continue end
				if dist > 6 then continue end
				dist += (flipped[i]-flipped[i-1]).Magnitude
				if dist < 6 then
					node = i
				end
			end
			local point = flipped[node] + (flipped[node+1]-flipped[node]).Unit * (const-dist)
			
			local Vector,d,p = NearestPath(HRP.Position,point,Closest.Player)
			
			MoveVector = Vector
			MovePlayer = true
			Rotation = CFrame.Angles(0,-1.57079632679,0)
			ToFace = HRP.Position + Vector
			
			return ToFace,Rotation
		end
		]]
		if PlayerTracking[Closest.Player.Name] then

			local Params = RaycastParams.new()
			Params.FilterType = Enum.RaycastFilterType.Exclude
			Params.FilterDescendantsInstances = LParts
			local pltr = PlayerTracking[Closest.Player.Name]

			if pltr.LastPos == pltr.Pos then
				local ep = Closest.Position + ((HRP.Position - Closest.Position).Unit * const)

				local Vector,Distance,Path = NearestPath(HRP.Position,ep,Closest.Player)
				if Distance > 8 and #Path > 2 then
					Rotation = CFrame.Angles(0,-1.57079632679,0)
				end
				MoveVector = Vector
				MovePlayer = true
				return ToFace,Rotation
			else
				local pmdir = (pltr.Pos - pltr.LastPos).Unit
				local perpmdir1 = (2.5 *(Vector3.new(-pmdir.Z,0,pmdir.X)) + (1 * pmdir)).Unit
				local perpmdir2 = (2.5 *(Vector3.new(pmdir.Z,0,-pmdir.X)) + ( 1 *pmdir)).Unit
				local space1 = workspace:Raycast(HRP.Position,perpmdir1 * 100,Params)
				local space2 = workspace:Raycast(HRP.Position,perpmdir2 * 100,Params)
				local choice = nil

				if space2 then
					if not space1 then
						if space2.Distance < 2.5 then
							choice = perpmdir1
						end
					elseif space2.Distance > space1.Distance and space1.Distance <2.5 then
						choice = perpmdir2
					end
				elseif space1 then
					if space1.Distance < 2.5 then
						choice = perpmdir2
					end
				end

				if not choice then
					if ((HRP.Position + perpmdir1) - Closest.Position).Magnitude < ((HRP.Position + perpmdir2) - Closest.Position).Magnitude then
						choice = perpmdir2
					else
						choice = perpmdir1
					end
				end

				if choice then
					
					if DEBUG_VISUALISER then
						Visualise({Closest.Position,Closest.Position + pmdir * 25},Color3.fromRGB(255,0,0))
						Visualise({HRP.Position,HRP.Position + (choice * 5)},Color3.fromRGB(0,255,0))
					end
					local ep = Closest.Position + (((HRP.Position + (choice * 3)) - Closest.Position).Unit) * const
					
					local v,d,p = NearestPath(HRP.Position,Closest.Position,Closest.Player)


					local Vector,Distance,Path = NearestPath(HRP.Position,ep,Closest.Player) 
					
					
					if Distance > 8 and #Path > 2 then
						Rotation = CFrame.Angles(0,-1.57079632679,0)
						ToFace = HRP.Position + Vector
					end
					
					
					MoveVector = Vector
					MovePlayer = true
					return ToFace,Rotation
				end
			end
		end
	end
	return ToFace,Rotation
end

local function UpdateBombs(step)
	for _,v in pairs(Players:GetPlayers()) do
		if v.Character then
			if v.Character:FindFirstChildWhichIsA("Tool") then
				local tool = v.Character:FindFirstChildWhichIsA("Tool")

				if not BombTracker[tool] then
					BombTracker[tool] = {
						Time = 10,
						LastOwner = v
					}
				else
					BombTracker[tool].LastOwner = v
					BombTracker[tool].Time -= step
				end

			end
		end
	end
	for Inst,_ in pairs(BombTracker) do
		if Inst.Parent == nil then
			table.remove(BombTracker,Inst)
		end
	end
end

local function Main(step)
	--UpdateBombs(step)
	UpdatePlayers()
	UpdateLocalPlayerParts()
	if LocalPlayer.Character then
		Character = LocalPlayer.Character
		if Character:FindFirstChildWhichIsA("Humanoid") then
			Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
			HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
			if HumanoidRootPart and Humanoid then
				if HumanoidRootPart:IsA("BasePart") and Humanoid.Health > 0 then
					local Closest = ClosestPlayer(HumanoidRootPart.Position)
					if Track and Closest then
						local ToFace,Rot = TrackPlayer(Closest,HumanoidRootPart,step)
						if ToFace then
							Face(ToFace,HumanoidRootPart,Rot)
						end
					end
					if Hold and Closest and Character:FindFirstChildWhichIsA("Tool") then
						local t = Character:FindFirstChildWhichIsA("Tool")
						if BombTracker[t] then
							t = BombTracker[t].Time
						else
							t = 1
						end
						
						local ToFace,Rot = HoldOn(Closest,HumanoidRootPart,t)
						if ToFace then
							Face(ToFace,HumanoidRootPart,Rot)
						end
					end
				end
			end
		end
	end
end

local function OnInstanceAdded(Inst: Instance)
	if Inst:IsA("Tool") then
		GrabbedAt = tick()
	end
end

local function OnChr(Chr: Model)
	Chr.ChildAdded:Connect(OnInstanceAdded)
end

RunService:BindToRenderStep("MovePlayer", Enum.RenderPriority.Character.Value + 1, function()
	if LocalPlayer.Character then
		local HRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local Humanoid: Humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
		if Humanoid and HRP and MovePlayer then
			Humanoid.AutoRotate = false
			if MovePlayerTo then
				if (HRP.Position - MoveVector).Magnitude > 0.08 then
					MoveVector = (MoveVector - HRP.Position).Unit * Vector3.new(1,0,1)
				else
					MoveVector = (MoveVector - HRP.Position) * Vector3.new(1,0,1)
				end
				MovePlayerTo = false
			end
			Humanoid:Move(MoveVector, false)
			MovePlayer = false
		elseif Humanoid and HRP then
			Humanoid.AutoRotate = true
		end
	end
end)

RunService.RenderStepped:Connect(Main)
RunService.RenderStepped:Connect(UpdateSphere)
Inputs.InputBegan:Connect(OnKey)
LocalPlayer.CharacterAdded:Connect(OnChr)
